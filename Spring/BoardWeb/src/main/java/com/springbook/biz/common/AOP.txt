AOP (Aspect Oriented Programming) 관점 지향 프로그래밍
: 응집도를 높이는 기술, 반복되는 코드의 응집도를 높여서 적용.
	- 메소드가 작동될때 Advice 클래스에 저장된 메소드가 실행 (before,after....)
	- 로그처리, 예외처리, 트랜잭션 처리 <== 모든 메소드가 실행될때 마다 코딩해야 하는 부분
	

- Advice : 반복되는 코드를 저장하고 있는 메소드 (로그처리, 예외처리,트랜잭션처리)를 가진 클래스
	-핵심 관심 (Core Concerns) : 메소드가 가지고 있는 실제 비니지스 로직
	-횡단 관심 (Cross-cutting Concerns) : 공통의 기능을 처리하는 로직 (로그,예외처리,트랜잭션 처리)

- 조인 포인트 : AOP가 호출하는 비즈니스 메소드, BoardServiceImpl 클래스의 메소드들,
	UserServiceImpl 클래스 내부의 메소드들

- 포인트 컷 : 필터링된 조인 포인트 (AOP가 적용될 메소드를 필터링 설정)
		  : 공통 기능을 적용하기 위해서는 포인트컷 셋팅이 필요하다.
		  
	expression="execution(* com.springbook.biz..*Impl.*(..))"

	* 					: 리턴타입
	com.springbook.biz. : 패키지 경로
	.*Impl 				: 클래스명(앞에는 아무거나 상관없음*Impl로 끝나는 클래스 이름)
	*(..)				: 메소드명, * : 모든 메소드, (..) : 모든 매개변수
	
	*OOP (객체 지향 프로그래밍) : 완전하게 핵심관심과, 횡단 관심을 분리하기 어렵다.
		Spring에서는 핵심관심과 횡단 관심을 완전하게 분리해서 구현하기가 용이하다.
		
advice 각 조인 포인트에 삽입되어 동작할 횡단 관심에 해당하는 공통기능이 적용된 메소드 (기능)

advice 의 동작 시점 : 
	- Before				: 비즈니스 메소드(핵심관심) 실행 전 실행
	- After
		-- After-Returning	: 메소드가 성공적으로 리턴되면 작동
		-- After-Throwing	: 예외가 발생 되면 작동
		-- After			: 비즈니스 메소드(핵심관심) 실행 후 실행
	- Around				: 비즈니스 메소드 싱핼 전후 실행됨
		
		

1. AOP 설치 (라이브러리 등록)

<!-- AOP 라이브러리 추가 시작 -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${org.aspectj-version}</version>
		</dependency>
		
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>1.8.8</version>
		</dependency>
	
		<!-- AOP 라이브러리 추가 끝 -->
		
2. AOP 설정	(applicationContext.xml)	
	-NameSpace 에서 : AOP 등록
	
	<!-- AOP 설정 -->
	<aop:config>
		<aop:pointcut expression="execution(* com.springbook.biz..*Impl.*(..))" id="allPointcut"/>
	
		<aop:aspect ref = "log">
			<aop:after pointcut-ref ="allPointcut" method="printMyLog"/>
		</aop:aspect>
	
	</aop:config>
	





